@import url("https://fonts.googleapis.com/css?family=Roboto:300,400,500");
@font-face {
  font-family: 'icomoon';
  src: url("../fonts/icomoon/icomoon.eot?wtzv43");
  src: url("../fonts/icomoon/icomoon.eot?wtzv43#iefix") format("embedded-opentype"), url("../fonts/icomoon/icomoon.ttf?wtzv43") format("truetype"), url("../fonts/icomoon/icomoon.woff?wtzv43") format("woff"), url("../fonts/icomoon/icomoon.svg?wtzv43#icomoon") format("svg");
  font-weight: normal;
  font-style: normal; }

.icon-cross {
  content: "\e904"; }

.icon-nav-watch {
  content: "\e900"; }

.icon-nav-about {
  content: "\e901"; }

.icon-nav-adults {
  content: "\e902"; }

.icon-nav-safe {
  content: "\e903"; }

/* @keyframes duration | timing-function | delay |
   iteration-count | direction | fill-mode | play-state | name

EG: animation: 3s ease-in 1s 2 reverse both paused slidein; */
/* WRAP */
/* ELLIP */
/* TRANSITIONS */
/* BREAK POINTS */
/* -- min-width by default
   -- if 2nd parameter is 'max-width', max-width used instead
   -- if $until is added, $point becomes min-width and $until is max-width */
/* LIST MARGINS */
/* CALC */
/* FLEXBOX */
/* ------------------------------------------------------
 * FLEXBOX MIXIN
 * ------------------------------------------------------
 * @desc  Let's you create flexbox container and item css with 2 mixins

 * @usage
 *
 *    @include flexbox-container(
 *
 *        $display : flex,        [flex / inline]
 *        $direction : row,       [row / row-reverse / column / column-reverse]
 *        $wrap : nowrap,         [nowrap / wrap / wrap-reverse]
 *        $justify : start,       [start / end / center / between / around]
 *        $alignContent : start,  [start / end / center / between / around / stretch]
 *        $alignItems : center     [start / end / center / baseline / stretch]
 *
 *    );
 *
 *
 *    @include flexbox-item(
 *
 *        $order : null,          [integer] -- custom order of items
 *        $grow : 0,              [0 / 1]
 *        $shrink : 1,            [0 / 1]
 *        $basis : auto,          [auto / <length>]
 *        $alignSelf : auto       [auto / start / end / center / baseline / stretch]
 *
 *    );
 *
 * @author maxoys45
 * @version 0.1
 * ------------------------------------------------------ */
/* ASPECT RATIO */
/* HARDWARE ACCEL */
/* CENTRED CONTENT */
/* TARGET IE10+ */
/* BG IMAGE SVG WITH PNG FALLBACK */
/* ANIMATED PNG */
/* Mixin to replicate an animated GIF using Keyframes and a PNG Sprite image.

	$numberOfSteps 	= the number of frames to step between (no limit to number of steps)
	$animName 		= purely used as the animation name to avoid duplicate animations
	$imageSize 		= the width or height of the PNG image which needs to be shown in each frame
	$duration 		= the total time for the animation in seconds
	$playCount		= the way the animation is played (linear, infinite, inout)

	** requires auto-prefixer to support all modern browsers
	** Requires 'compass/css3' */
/* example use */
.animatedImage {
  -webkit-animation: YES_WE_CAN 1s 2 forwards;
          animation: YES_WE_CAN 1s 2 forwards;
  /* places the keyframes animation outside of the selector */
  background-image: url("http://www.maxhenchman.co.uk/random/123test.png");
  background-repeat: no-repeat;
  background-color: #FF0000;
  display: block;
  width: 100px;
  height: 100px;
  overflow: hidden;
  margin: 20px auto; }

@-webkit-keyframes YES_WE_CAN {
  0% {
    background-position: 0 0; }
  20% {
    background-position: -0px 0; }
  20.0001% {
    background-position: -100px 0; }
  40% {
    background-position: -100px 0; }
  40.0001% {
    background-position: -200px 0; }
  60% {
    background-position: -200px 0; }
  60.0001% {
    background-position: -300px 0; }
  80% {
    background-position: -300px 0; }
  80.0001% {
    background-position: -400px 0; }
  100% {
    background-position: -400px 0; } }

@keyframes YES_WE_CAN {
  0% {
    background-position: 0 0; }
  20% {
    background-position: -0px 0; }
  20.0001% {
    background-position: -100px 0; }
  40% {
    background-position: -100px 0; }
  40.0001% {
    background-position: -200px 0; }
  60% {
    background-position: -200px 0; }
  60.0001% {
    background-position: -300px 0; }
  80% {
    background-position: -300px 0; }
  80.0001% {
    background-position: -400px 0; }
  100% {
    background-position: -400px 0; } }

/* BUTTONS */
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

*, *:before, *:after {
  box-sizing: border-box; }

html {
  line-height: 1;
  font-size: 10px; }

body {
  font-family: "Roboto", sans-serif; }

input, button, select, textarea, optgroup, option {
  font-family: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit; }

h1, h2, h3, h4 {
  line-height: 1.3; }

h1 {
  font-size: 4.8em;
  margin-bottom: .8em; }

h2 {
  font-size: 4em;
  margin-bottom: .2em; }
  @media screen and (min-width: 480px) {
    h2 {
      font-size: 5em; } }

h3 {
  font-size: 2.1em;
  margin-bottom: .5em; }

h4 {
  font-size: 1.4em;
  margin-bottom: .5em; }

a, button, input, textarea {
  outline: none; }

p {
  line-height: 1.3;
  font-size: 1.5rem;
  margin-bottom: 1em; }
  p:last-of-type {
    margin-bottom: 0; }
  p a {
    font-weight: 400; }
  @media screen and (min-width: 480px) {
    p {
      font-size: 2rem; } }

.anchor, p a {
  font-size: 2rem;
  line-height: 1.3;
  outline: none;
  text-decoration: underline; }

a {
  text-decoration: none;
  color: inherit; }

img {
  display: block;
  max-width: 100%; }

strong {
  font-weight: 500; }

.hidden {
  display: none; }

.input--default {
  display: inline-block;
  vertical-align: middle;
  cursor: default;
  border: 1px solid #e6e6e6;
  border-radius: 0.2rem;
  background: #FFFFFF;
  padding: 1.5rem 1rem;
  font-size: 2rem;
  outline: none;
  color: #333333;
  text-align: left;
  position: relative;
  min-width: 150px;
  line-height: 1.3;
  text-decoration: none; }
  .input--default:hover {
    color: inherit; }

.stripInput {
  border: none;
  background: none;
  padding: 0;
  cursor: pointer;
  outline: none; }

.hiddenInputs, .autoUpdate {
  width: 0.1px;
  height: 0.1px;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  z-index: -1; }

.justify {
  text-align: justify; }

.wrapped {
  max-width: 1224px;
  margin-left: auto;
  margin-right: auto; }

iframe {
  width: 100%; }

.blue {
  background-color: blue; }

.red {
  background-color: red; }

.green {
  background-color: green; }

.pink {
  background-color: pink; }

.yellow {
  background-color: #ffde00; }

.orange {
  background-color: orange; }

.teal {
  background-color: teal; }

.brown {
  background-color: brown; }

.purple {
  background-color: purple; }

.cyan {
  background-color: #20c5e3; }

/* MAIN STYLES */
*, *:before, *:after {
  box-sizing: border-box; }

input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
  -webkit-appearance: none;
          appearance: none;
  margin: 0; }

html {
  height: 100%;
  font-size: 10px; }

body {
  font-family: 'Open Sans';
  height: 100%;
  line-height: 1;
  color: #333333;
  background: #fcfcfc;
  font-size: 1.6rem; }

.allContent {
  padding: 0 1rem;
  height: 100%;
  text-align: center; }
  .allContent .inside {
    height: 100%; }

.title {
  padding: 1rem 2rem;
  background: #333333;
  color: #FFFFFF;
  font-size: 2rem;
  margin: 0 -1rem; }

.updateBtn {
  background: #f3b700;
  color: #333333;
  padding: 2rem;
  width: 100%;
  font-size: 2rem;
  border: none;
  outline: none;
  cursor: pointer;
  margin: 1rem 0; }

.autoUpdate__label {
  background: #e3e3e3;
  color: #c9c9c9;
  padding: 1rem;
  display: block;
  margin-bottom: 1rem;
  cursor: pointer; }
  .autoUpdate__label.active {
    color: #333333;
    background-color: #00e600; }

.stocks {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-direction: normal;
  -webkit-box-orient: horizontal;
  -ms-flex-direction: row;
  flex-direction: row;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  -ms-flex-line-pack: start;
  align-content: flex-start;
  -webkit-box-align: flex-center;
      -ms-flex-align: flex-center;
          align-items: flex-center;
  align-items: center;
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center; }

.stock {
  -webkit-box-flex: 0;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-align-self: auto;
  -ms-flex-item-align: auto;
  -ms-grid-row-align: auto;
      align-self: auto;
  -webkit-align-self: flex-auto;
  -ms-flex-item-align: auto;
  align-self: flex-auto;
  width: 48%;
  border: 1px solid #333333;
  margin-bottom: 1rem;
  border-radius: 3px;
  overflow: hidden; }
  .stock:nth-child(2n) {
    margin-left: 4%; }

.stock__title {
  background: #4d4d4d;
  color: #FFFFFF;
  padding: .5rem; }

.stock__value {
  background: #efefef;
  padding: 1rem; }

.stock__price {
  display: inline-block;
  vertical-align: middle;
  margin-right: .5rem; }

.stock__value--price {
  position: relative; }
  .stock__value--price:after {
    transition: 0.25s opacity ease-in-out;
    content: '';
    position: absolute;
    right: .5rem;
    top: 50%;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%);
    width: 1.5rem;
    height: 1.5rem;
    display: block;
    background-size: 100%;
    background-repeat: no-repeat;
    opacity: 0; }
  .stock__value--price.higher:after {
    background-image: url("../img/arrow-up.svg");
    opacity: 1; }
  .stock__value--price.lower:after {
    background-image: url("../img/arrow-down.svg");
    opacity: 1; }
  .stock__value--price.neutral:after {
    background-image: url("../img/arrow-right.svg");
    opacity: 1; }

.stock__price__img {
  display: inline-block;
  vertical-align: middle;
  width: 2rem; }

/* @import "_incs/_selectric"; */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
